// Generated by CoffeeScript 1.3.1
(function() {
  var Forms,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Forms = RHOK.module('forms');

  Forms.SectionView = (function(_super) {

    __extends(SectionView, _super);

    SectionView.name = 'SectionView';

    function SectionView() {
      this.render = __bind(this.render, this);
      return SectionView.__super__.constructor.apply(this, arguments);
    }

    SectionView.prototype.tagName = 'fieldset';

    SectionView.prototype.className = 'well';

    SectionView.prototype.headerTmpl = _.template('<h2><%= header %></h2>');

    SectionView.prototype.initialize = function() {
      return this.model.on('all', this.render);
    };

    SectionView.prototype.render = function() {
      var form;
      this.$el.empty();
      this.$el.append(this.headerTmpl({
        header: this.model.get('header')
      }));
      form = new Backbone.Form({
        model: this.model
      });
      form.render();
      this.$el.append(form.el);
      return this;
    };

    return SectionView;

  })(Backbone.View);

  Forms.FormView = (function(_super) {

    __extends(FormView, _super);

    FormView.name = 'FormView';

    function FormView() {
      this.render = __bind(this.render, this);
      return FormView.__super__.constructor.apply(this, arguments);
    }

    FormView.prototype.tagName = 'form';

    FormView.prototype.render = function() {
      var that;
      that = this;
      this.$el.empty();
      this.collection.each(function(model) {
        var view;
        view = new Forms.SectionView({
          model: model
        }).render();
        return that.$el.append(view.el);
      });
      return this;
    };

    return FormView;

  })(Backbone.View);

}).call(this);
