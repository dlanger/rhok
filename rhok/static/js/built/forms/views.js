// Generated by CoffeeScript 1.3.1
(function() {
  var Forms,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Forms = RHOK.module('forms');

  Forms.SectionView = (function(_super) {

    __extends(SectionView, _super);

    SectionView.name = 'SectionView';

    function SectionView() {
      this.render = __bind(this.render, this);
      return SectionView.__super__.constructor.apply(this, arguments);
    }

    SectionView.prototype.tagName = 'fieldset';

    SectionView.prototype.className = 'well';

    SectionView.prototype.headerTmpl = _.template('<h2><%= header %></h2>');

    SectionView.prototype.initialize = function() {
      return this.model.on('all', this.render);
    };

    SectionView.prototype.render = function() {
      this.$el.empty();
      this.$el.append(this.headerTmpl({
        header: this.model.get('header')
      }));
      this.form = new Backbone.Form({
        model: this.model
      });
      this.form.render();
      this.$el.append(this.form.el);
      return this;
    };

    return SectionView;

  })(Backbone.View);

  Forms.FormView = (function(_super) {

    __extends(FormView, _super);

    FormView.name = 'FormView';

    function FormView() {
      this.render = __bind(this.render, this);
      return FormView.__super__.constructor.apply(this, arguments);
    }

    FormView.prototype.tagName = 'form';

    FormView.prototype.buttonTmpl = _.template('<button class="btn btn-primary btn-large" \
      data-loading-text="<%= loadingText %>" type="submit"><%= text %></button>');

    FormView.prototype.attributes = {
      'action': '/process',
      'method': 'POST'
    };

    FormView.prototype.events = {
      'submit': 'onSubmit'
    };

    FormView.prototype.render = function() {
      var that;
      that = this;
      this.$el.empty();
      this.sections = [];
      this.collection.each(function(model) {
        var section;
        section = new Forms.SectionView({
          model: model
        }).render();
        that.$el.append(section.el);
        return that.sections.push(section);
      });
      this.$button = $(this.buttonTmpl({
        text: 'Submit',
        loadingText: 'Waiting...'
      })).button();
      this.$el.append(this.$button);
      this.$errorDialog = $('#Error').modal({
        show: false
      });
      this.$resultsDialog = $('#Results').modal({
        keyboard: false,
        show: false
      });
      return this;
    };

    FormView.prototype.onSubmit = function(e) {
      var errors, formJSON, isValid, section, that, _i, _len, _ref;
      that = this;
      e.preventDefault();
      this.$button.button('loading');
      isValid = true;
      formJSON = {};
      _ref = this.sections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        section = _ref[_i];
        errors = section.form.commit();
        if (errors) {
          isValid = false;
        }
        if (!errors) {
          formJSON[section.model.get('header')] = section.model.toJSON();
        }
      }
      return $.ajax({
        url: this.attributes.action,
        type: 'POST',
        data: {
          data: JSON.stringify(formJSON)
        },
        success: function(html) {
          return that.$resultsDialog.html(html);
        },
        error: function() {
          that.$errorDialog.modal('show');
          return that.$button.button('reset');
        }
      });
    };

    return FormView;

  })(Backbone.View);

}).call(this);
